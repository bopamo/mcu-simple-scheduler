/** 
 * @page GET_START Getting Started with MSS  
 *
 * @subpage MSS_MULTI_TASKING_BASIC
 * @subpage CREATING_MSS_APPLICATION
 */
 
 
/** 
 * @page MSS_MULTI_TASKING_BASIC MSS Multi Tasking Basic
 *
 * @section MSS_TASK   MSS Task
 *
 * MSS Task is based on coroutine concept which allows a function code (in this 
 * case the MSS task function code) to suspend at a certain location and then
 * resume at the same spot where it left before. Coroutine enables the possibility
 * to implement a very light weight multi tasking system at the cost of losing
 * the ability to retain the local variables between suspending and re-entering
 * the task code (MSS has only one memory stack shared by the scheduler and all tasks). 
 *
 * This means that when using local variable(s) in its code, a task shall expect 
 * that the local variable value to be changed when re-entering the function
 * after suspending it self. Therefore static data type shall be used if the variable
 * value is wished to be retained between suspending and re-entering the task.
 * 
 * Even tough MSS also supports preemptive schedulding (see next section), it doesn't
 * mean that when a lower task is preempted, it will lose the local variable. MSS
 * scheduler preempts the lower priority task by calling a software interrupt which
 * will call the scheduler function again and execute the higher priority task.
 * So basically the local variable context of the preempted task is stored safely
 * on the top of memory stack.
 * 
 * In general a MSS task looks like the following:
 *
 * @code
 *
 * void a_mss_task(void *param)
 * {
 *   static mss_task_ctx_t task_ctx = MSS_TASK_CTX_STATE_INIT_VAL;
 *   // other variable declaration - be careful of using local variables
 *   
 *   MSS_BEGIN(task_ctx); // must be the first instruction in the task code
 *
 *   // initialization code
 *
 *   while(1)
 *   {
 *     // do some tasks
 *
 *     MSS_RETURN(task_ctx); // suspend task temporarily
 *
 *     // do another tasks
 *   }
 *
 *   MSS_FINISH(); // last instruction in task code
 * }
 *
 * @endcode 
 *
 * As can be seen above, a task needs a static variable with mss_task_ctx_t type (initialized
 * with value MSS_TASK_CTX_STATE_INIT_VAL) to store the information in which code part the
 * function has been suspended last time.
 *
 * MSS_BEGIN(ctx) shall be the first instruction in the task code, while MSS_FINISH() as
 * the last one. When a task want to give up a CPU, it calls the MSS_RETURN(ctx) which also
 * stores the information of the address where the task is left. The MSS_RETURN() is also
 * encapsulated by some macro functions of MSS modules, please refer to the API documentation
 * for further information.
 *
 * The implementation of coroutine in MSS is derived from: http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html
 * and similar to the implementation of protothreads: http://dunkels.com/adam/pt/
 *
 * 
 * @section MSS_Scheduling   MSS Scheduling
 *
 * MSS supports two basic scheduling policy depending on the configuration value of MSS_PREEMPTIVE_SCHEDULING
 * in mss_cfg.h:
 *
 * - Cooperative Scheduling (MSS_PREEMPTIVE_SCHEDULING = FALSE): in the cooperative scheduling mode, a task
 *   will be executed as long as it hasn't given up the CPU by calling the MSS_RETURN() function. 
 *   The scheduler always looks for the highest priority task which is ready to be executed after the 
 *   running task suspends. The advantage of this scheduling policy is that it needs less memory stack than 
 *   the preemptive mode, however the disadvatage is that higher prioirty task might expect longer
 *   lattency since it can't preempt a running task with lower priority.
 *
 * - Preemptive Scheduling (MSS_PREEMPTIVE_SCHEDULING = TRUE): in the preemptive scheduling mode,
 *   a higher priority task can preempt a running task which has lower priority. Altough the MSS task
 *   is based on coroutine concept, it can be assured that a preempted task will not lose its local
 *   variable when it is preempted by the higher priority task. The main advantage of this scheduling policy
 *   is that preemption which increase the responsiveness of higher priority task, however in this policy
 *   the scheduler can go deep into the memory stack, and therefore a bigger memory stack is needed to prevent
 *   stack overflow.
 *
 */
 
 
/** 
 * @page CREATING_MSS_APPLICATION Creating MSS Application
 *
 * The steps needed to create MSS application are described as follows:
 * - create (template files are available under <ROOT_DIRECTORY>/Sources/mss/templates/configuration) 
 *   and modify configuration files llist_cfg.h and mss_cfg.h:
 *     - llist_cfg.h contains the maximum number of linked list in the application. MSS needs at least 
 *       one linked list if MSS timer is activated, one for every message queues, and one for every
 *       memory blocks. Application might increase this number if necessary.
 *     - mss_cfg.h contains MSS main configurations:
 *         - Setting maximum number of tasks (MSS_NUM_OF_TASKS), list of tasks (MSS_TASK_LIST), 
 *           initial value of task ready bits (MSS_READY_TASK_BITS_INIT) which represents whether
 *           a task shall be activated per default at the begining.
 *         - Setting the scheduler policy: cooperative scheduling if MSS_PREEMPTIVE_SCHEDULUNG = FALSE
 *           or preemptive scheduling if MSS_PREEMPTIVE_SCHEDULING.
 *         - Each MSS modules (timer, message queue, event, semaphore, and memory blocks) can be 
 *           disabled, enabled, and configured (e.g. setting maximum number of module objects, or data 
 *           types) in this file. Modules which are not used shall be disabled to save memory footprint. 
 * - include the configuration files and the mss hardware independent (under "common" folder) and 
 *   hardware dependent (under "target/<TARGET_NAME>" folder) for compilation
 * - start writing the MSS application tasks which are included in the MSS_TASK_LIST.
 * - MSS shall be launched in the main() function which is recommended to look like follows:
 * @code
 * void main(void)
 * {
 *   // initialize mss
 *   mss_init();
 *
 *   // initialize application
 *   init_app();
 *
 *   // run mss - shall never return
 *   mss_run();
 * }
 * @endcode 
 *
 */
 
 